config:
  backend:
    name: DE_1920_45_comb_ontology
    slug: DE_1920_45_comb_ontology
    sortKey: 1
    baseUrl: http://notebook61:7070
    apiToken: ibtrirj2zq
    isDefault: true
    isNoSlugMode: 'True'
    maxDefault: '100'
    filteredLanguage: en
    dynamicSuggestions: '2'
    defaultModeTimeout: '0.0'
    mixedModeTimeout: '1.0'
    suggestSubjects: |-
      %PREFIXES%
      # IF CURRENT_WORD_EMPTY #

      %WARMUP_QUERY_1%

      # ELSE #

      SELECT ?qleverui_entity (SAMPLE(?name) AS ?qleverui_name) (SAMPLE(?alias) AS ?qleverui_alias) (SAMPLE(?count) AS ?qleverui_count) WHERE {
        { %WARMUP_QUERY_2% }
        # IF !CURRENT_WORD_EMPTY #
        FILTER REGEX(STR(?alias), "^%CURRENT_WORD%")
        # ENDIF #
      } GROUP BY ?qleverui_entity ORDER BY DESC(?qleverui_count)

      # ENDIF #
    suggestPredicates: |-
      %PREFIXES%
      # IF !CURRENT_SUBJECT_VARIABLE #

      SELECT ?qleverui_entity
                    (MIN(?name) as ?qleverui_name)
                    (MIN(?alias) as ?qleverui_alias)
                    (SAMPLE(?count_2) as ?qleverui_count)
                    ?qleverui_reversed WHERE {

        { { SELECT ?qleverui_entity (COUNT(?qleverui_tmp) AS ?count_2)
          WHERE { %CURRENT_SUBJECT% ?qleverui_entity ?qleverui_tmp  }
          GROUP BY ?qleverui_entity }
        BIND (0 AS ?qleverui_reversed) }
        UNION
        { { SELECT ?qleverui_entity (COUNT(?qleverui_tmp) AS ?count_2)
          WHERE { ?qleverui_tmp ?qleverui_entity %CURRENT_SUBJECT%  }
          GROUP BY ?qleverui_entity }
          BIND (1 AS ?qleverui_reversed) }
        { %WARMUP_QUERY_5% }
        # IF !CURRENT_WORD_EMPTY #
        FILTER REGEX(STR(?alias), "%CURRENT_WORD%", "i")
        # ENDIF #
      } GROUP BY ?qleverui_entity ?qleverui_reversed ORDER BY DESC(?qleverui_count)

      # ENDIF #
      # IF CONNECTED_TRIPLES_EMPTY AND CURRENT_SUBJECT_VARIABLE #

      SELECT ?qleverui_entity
                    (MIN(?name) as ?qleverui_name)
                    (MIN(?alias) as ?qleverui_alias)
                    (SAMPLE(?count_1) as ?qleverui_count) WHERE {
        { %WARMUP_QUERY_4% }
        # IF !CURRENT_WORD_EMPTY #
        FILTER REGEX(STR(?alias), "%CURRENT_WORD%", "i")
        # ENDIF #
      } GROUP BY ?qleverui_entity ORDER BY DESC(?qleverui_count)

      # ENDIF #

      # IF !CONNECTED_TRIPLES_EMPTY AND CURRENT_SUBJECT_VARIABLE #

      SELECT ?qleverui_entity
                    (MIN(?name) as ?qleverui_name)
                    (MIN(?alias) as ?qleverui_alias)
                    (SAMPLE(?count_2) as ?qleverui_count) WHERE {
        { SELECT ?qleverui_entity (COUNT(DISTINCT %CURRENT_SUBJECT%) AS ?count_2)
          WHERE { %CONNECTED_TRIPLES% %CURRENT_SUBJECT% ?qleverui_entity ?object }
          GROUP BY ?qleverui_entity }
        { %WARMUP_QUERY_5% }
        # IF !CURRENT_WORD_EMPTY #
        FILTER REGEX(STR(?alias), "%CURRENT_WORD%", "i")
        # ENDIF #
      } GROUP BY ?qleverui_entity ORDER BY DESC(?qleverui_count)

      # ENDIF #
    suggestObjects: |-
      %PREFIXES%
      SELECT ?qleverui_entity
                    (MIN(?name) AS ?qleverui_name)
                    (MIN(?alias) AS ?qleverui_alias)
                    (MAX(?count_1) AS ?qleverui_count) WHERE {
        {

          { SELECT ?qleverui_entity ?name ?alias ?count_1 WHERE {
            { SELECT ?qleverui_entity (COUNT(?qleverui_entity) AS ?count_1) WHERE {
              %CONNECTED_TRIPLES% %CURRENT_SUBJECT% %CURRENT_PREDICATE% ?qleverui_entity .
            } GROUP BY ?qleverui_entity }
            { %WARMUP_QUERY_3% }
            # IF !CURRENT_WORD_EMPTY #
            FILTER REGEX(STR(?alias), "^%CURRENT_WORD%")
            # ENDIF #
          } }

        } UNION {

          { SELECT ?qleverui_entity ?name ?alias ?count_1 WHERE {
            { SELECT ?qleverui_entity (COUNT(?qleverui_entity) AS ?count_1) WHERE {
              %CONNECTED_TRIPLES% %CURRENT_SUBJECT% %CURRENT_PREDICATE% ?qleverui_entity
            } GROUP BY ?qleverui_entity }
            %ENTITY_NAME_AND_ALIAS_PATTERN_DEFAULT%
            # IF !CURRENT_WORD_EMPTY #
            FILTER REGEX(STR(?alias), "^%CURRENT_WORD%")
            # ENDIF #
          } }

        }
      } GROUP BY ?qleverui_entity ORDER BY DESC(?qleverui_count)
    subjectName: ''
    alternativeSubjectName: ''
    predicateName: ''
    alternativePredicateName: ''
    objectName: ''
    alternativeObjectName: ''
    replacePredicates: ''
    supportedKeywords: as, base, bind, by, construct, contains-entity, contains-word,
      data, delete, distinct, filter, from, graph, group, has-predicate, having, insert,
      internal, keywords, limit, minus, named, not, offset, optional, optional, order,
      prefix, select, service, sort, textlimit, union, using, values, where, with
    supportedFunctions: asc, desc, avg, values, score, text, count, sample, min, max,
      average, concat, group_concat, langMatches, lang, regex, sum
    supportedPredicateSuggestions: ql:contains-word, ql:contains-entity
    suggestPrefixnamesForPredicates: 'True'
    fillPrefixes: 'True'
    filterEntities: 'False'
    suggestedPrefixes: ''
    suggestionEntityVariable: ?qleverui_entity
    suggestionNameVariable: ?qleverui_name
    suggestionAltNameVariable: ?qleverui_alias
    suggestionReversedVariable: ?qleverui_reversed
    frequentPredicates: ''
    frequentPatternsWithoutOrder: ''
    entityNameAndAliasPattern: BIND(?qleverui_entity AS ?name) BIND(?qleverui_entity
      AS ?alias)
    entityScorePattern: '{ SELECT ?qleverui_entity (COUNT(?predicate) AS ?count) WHERE
      { ?qleverui_entity ?predicate ?object } GROUP BY ?qleverui_entity }'
    predicateNameAndAliasPatternWithoutContext: BIND(?qleverui_entity AS ?name) BIND(?qleverui_entity
      AS ?alias)
    predicateNameAndAliasPatternWithContext: BIND(?qleverui_entity AS ?name) BIND(?qleverui_entity
      AS ?alias)
    entityNameAndAliasPatternDefault: BIND(?qleverui_entity AS ?name) BIND(?qleverui_entity
      AS ?alias)
    predicateNameAndAliasPatternWithoutContextDefault: BIND(?qleverui_entity AS ?name)
      BIND(?qleverui_entity AS ?alias)
    predicateNameAndAliasPatternWithContextDefault: BIND(?qleverui_entity AS ?name)
      BIND(?qleverui_entity AS ?alias)
    warmupQuery1: |-
      SELECT ?qleverui_entity (SAMPLE(?name) AS ?qleverui_name) (SAMPLE(?alias) AS ?qleverui_alias) (SAMPLE(?count) AS ?qleverui_count) WHERE {
        { SELECT ?qleverui_entity ?name ?alias ?count WHERE {
          %ENTITY_SCORE_PATTERN%
          %ENTITY_NAME_AND_ALIAS_PATTERN% }
        ORDER BY ?qleverui_entity }
      } GROUP BY ?qleverui_entity ORDER BY DESC(?qleverui_count)
    warmupQuery2: |-
      SELECT ?qleverui_entity ?name ?alias ?count WHERE {
        %ENTITY_SCORE_PATTERN%
        %ENTITY_NAME_AND_ALIAS_PATTERN%
      } INTERNAL SORT BY ?alias
    warmupQuery3: |-
      SELECT ?qleverui_entity ?name ?alias ?count WHERE {
        %ENTITY_SCORE_PATTERN%
        %ENTITY_NAME_AND_ALIAS_PATTERN%
      } INTERNAL SORT BY ?qleverui_entity
    warmupQuery4: |-
      SELECT ?qleverui_entity ?name ?alias ?count_1 WHERE {
        { { SELECT ?qleverui_entity (COUNT(DISTINCT ?subject) AS ?count_1) WHERE { ?subject ?qleverui_entity ?object } GROUP BY ?qleverui_entity }
          %PREDICATE_NAME_AND_ALIAS_PATTERN_WITHOUT_CONTEXT%
        } UNION {
        { { SELECT ?qleverui_entity (COUNT(DISTINCT ?subject) AS ?count_1) WHERE { ?subject ?qleverui_entity ?object } GROUP BY ?qleverui_entity }
          %PREDICATE_NAME_AND_ALIAS_PATTERN_WITHOUT_CONTEXT_DEFAULT%
        } } }
    warmupQuery5: |-
      SELECT ?qleverui_entity ?name ?alias ?count_1 WHERE {
        { { SELECT ?qleverui_entity (COUNT(DISTINCT ?subject) AS ?count_1) WHERE { ?subject ?qleverui_entity ?object } GROUP BY ?qleverui_entity }
          %PREDICATE_NAME_AND_ALIAS_PATTERN_WITH_CONTEXT%
        } UNION {
        { { SELECT ?qleverui_entity (COUNT(DISTINCT ?subject) AS ?count_1) WHERE { ?subject ?qleverui_entity ?object } GROUP BY ?qleverui_entity }
          %PREDICATE_NAME_AND_ALIAS_PATTERN_WITH_CONTEXT_DEFAULT%
        } } }
    suggestSubjectsContextInsensitive: |-
      %PREFIXES%
      # IF CURRENT_WORD_EMPTY #

      %WARMUP_QUERY_1%

      # ELSE #

      SELECT ?qleverui_entity (SAMPLE(?name) AS ?qleverui_name) (SAMPLE(?alias) AS ?qleverui_alias) (SAMPLE(?count) AS ?qleverui_count) WHERE {
        { %WARMUP_QUERY_2% }
        # IF !CURRENT_WORD_EMPTY #
        FILTER REGEX(STR(?alias), "^%CURRENT_WORD%")
        # ENDIF #
      } GROUP BY ?qleverui_entity ORDER BY DESC(?qleverui_count)

      # ENDIF #
    suggestPredicatesContextInsensitive: |-
      %PREFIXES%

      SELECT ?qleverui_entity
                    (MIN(?name) as ?qleverui_name)
                    (MIN(?alias) as ?qleverui_alias)
                    (SAMPLE(?count_1) as ?qleverui_count) WHERE {
        { %WARMUP_QUERY_4% }
        # IF !CURRENT_WORD_EMPTY #
        FILTER REGEX(STR(?alias), "%CURRENT_WORD%", "i")
        # ENDIF #
      } GROUP BY ?qleverui_entity ORDER BY DESC(?qleverui_count)
    suggestObjectsContextInsensitive: |-
      %PREFIXES%
      # IF CURRENT_WORD_EMPTY #

      %WARMUP_QUERY_1%

      # ELSE #

      SELECT ?qleverui_entity (SAMPLE(?name) AS ?qleverui_name) (SAMPLE(?alias) AS ?qleverui_alias) (SAMPLE(?count) AS ?qleverui_count) WHERE {
        { %WARMUP_QUERY_2% }
        # IF !CURRENT_WORD_EMPTY #
        FILTER REGEX(STR(?alias), "^%CURRENT_WORD%")
        # ENDIF #
      } GROUP BY ?qleverui_entity ORDER BY DESC(?qleverui_count)

      # ENDIF #
    mapViewBaseURL: https://github.com/ad-freiburg/qlever-petrimaps
  examples: []
